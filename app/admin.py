from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

from app.core.is_admin import IsAdmin
from app.core.sender import send_message

from app.db.request import get_accept_accounts, get_account, get_user_by_id_user, edit_user_id_db, \
    get_active_users, get_decline_accounts
from app.core.keyboard import admin_keyboard, accept_text_kb, delete_accept
from app.utils.states import Post, Delete, Unblock

admin_router = Router()
admin_router.message.filter(IsAdmin())


async def admin_start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! "
                         f"–¢—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω(–∞) –∫–∞–∫ –∞–¥–º–∏–Ω",
                         reply_markup=admin_keyboard()
                         )


@admin_router.message(F.text.startswith("–ü—Ä–æ—Å–º–æ—Ç—Ä"), IsAdmin())
async def admin_show_users(message: types.Message, state: FSMContext):
    await state.clear()
    users = await get_active_users()
    text = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
    for user in users:
        text = text + f"üëâ {user.surname} {user.name} {user.patronymic}\n"
    await message.answer(f"{text}")


@admin_router.message(F.text.startswith("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), IsAdmin())
async def sender_news(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(Post.text)


@admin_router.message(F.text.startswith("–£–¥–∞–ª–∏—Ç—å"), IsAdmin())
async def decline_user_by_surname(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–æ–∫")
    await state.set_state(Delete.surname)


@admin_router.message(F.text.startswith("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"), IsAdmin())
async def aclivate_declined_user(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    text = "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \n"
    blocks = await get_decline_accounts()
    for block in blocks:
        text += f"üëâ {block.surname} {block.name} {block.patronymic}\n"
    await message.answer(f"{text}" + "\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state(Unblock.surname)


@admin_router.message(Unblock.surname, IsAdmin)
async def unblock_user(message: types.Message, state: FSMContext) -> None:
    await state.update_data(surname=message.text)
    data = await state.get_data()
    data = get_blocked_user



@admin_router.message(Post.text, IsAdmin())
async def accept_newsletter(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?")
    await message.answer(f"{data['text']}",
                         reply_markup=accept_text_kb())


@admin_router.callback_query(F.data == "text_accept")
async def accept_text_def(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!")
    data1 = await state.get_data()
    print(data1)
    await state.clear()
    accounts = await get_accept_accounts()
    for account in accounts:
        print(account.id, account.id_tg, type(account.id_tg))
        await send_message(data1["text"], account.id_tg)
    await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@admin_router.callback_query(F.data == "text_decline")
async def decline_text_def(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(Post.text)


@admin_router.message(Delete.surname, IsAdmin())
async def confirm_user_by_surname(message: types.Message, state: FSMContext) -> None:
    await state.update_data(surname=message.text)
    data = await state.get_data()
    try:
        user = await get_account(data["surname"])
        await state.clear()
        account = await get_user_by_id_user(user.id)
        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞? \n"
                             f"–§–∞–º–∏–ª–∏—è: {user.surname}\n"
                             f"–ò–º—è: {user.name}\n"
                             f"–û—Ç—á–µ—Å—Ç–≤–æ: {user.patronymic}\n",
                             reply_markup=delete_accept(id_user=account.id_tg)
                             )
    except Exception:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@admin_router.callback_query(F.data.startswith("delete_"), IsAdmin())
async def delete_callback_query(call: types.CallbackQuery) -> None:
    call_data = call.data.split("_")[1]
    await edit_user_id_db(int(call_data), False)
    await call.message.edit_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
    await send_message("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–æ–º!", int(call_data))
    print(call_data)
