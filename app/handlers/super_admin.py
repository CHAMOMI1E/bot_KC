from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from app.core.filter.is_admin import IsSuperAdmin
from app.core.sender import send_message
from app.db.models import Status

from app.db.request import edit_user_id_db, \
    get_active_users, get_decline_users, get_account, dev_update_status, get_user_for_ta_admin, get_user_for_undelete, \
    get_user_for_delete
from app.core.keyboard import super_admin_keyboard, delete_accept, accept_unblock, back_to_menu_kb, accept_admin_kb, \
    admin_keyboard, take_away_admin_kb
from app.utils.states import Post, Delete, Unblock, NewAdmin, TakeAwayAdmin

sup_admin_router = Router()
sup_admin_router.message.filter(IsSuperAdmin())
# sup_admin_router.callback_query.filter(IsSuperAdmin())


async def super_admin_start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! "
                         f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω",
                         reply_markup=super_admin_keyboard()
                         )


@sup_admin_router.callback_query(F.data == "–ü—Ä–æ—Å–º–æ—Ç—Ä")
async def admin_show_users(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    admins, users = await get_active_users()
    list_of_users: str = ""
    list_of_admins: str = ""
    for admin in admins:
        list_of_admins = list_of_admins + f"üëâ {admin.surname} {admin.name} {admin.patronymic}\n"
    for user in users:
        list_of_users = list_of_users + f"üëâ {user.surname} {user.name} {user.patronymic}\n"
    await call.message.edit_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n"
                                 f"{list_of_admins}\n\n"
                                 f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
                                 f"{list_of_users}")
    await call.message.answer("–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?", reply_markup=back_to_menu_kb())


@sup_admin_router.callback_query(F.data == "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def decline_user_by_surname(call: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–æ–∫",
                                 reply_markup=back_to_menu_kb())
    await state.set_state(Delete.surname)


@sup_admin_router.callback_query(F.data == "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def aclivate_declined_user(call: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    text = "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \n"
    blocks = await get_decline_users()
    for block in blocks:
        text += f"üëâ {block.surname} {block.name} {block.patronymic}\n"
    await call.message.edit_text(f"{text}" + "\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:",
                                 reply_markup=back_to_menu_kb())
    await state.set_state(Unblock.surname)


@sup_admin_router.callback_query(F.data == "–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")
async def add_admin(call: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                 reply_markup=back_to_menu_kb())
    await state.set_state(NewAdmin.surname)


@sup_admin_router.callback_query(F.data == "–û—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞")
async def take_away_admin(call: types.CallbackQuery, state: FSMContext) -> TakeAwayAdmin.surname:
    await state.clear()
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞",
                                 reply_markup=back_to_menu_kb())
    await state.set_state(TakeAwayAdmin.surname)


@sup_admin_router.callback_query(F.data == "text_decline")
async def decline_text_def(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(Post.text)


@sup_admin_router.callback_query(F.data.startswith("delete_"))
async def delete_callback_query(call: types.CallbackQuery) -> None:
    call_data = call.data.split("_")[1]
    await edit_user_id_db(int(call_data), False)
    await call.message.edit_text("–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞!")
    await send_message("–£ –≤–∞—Å –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", int(call_data))
    await call.message.answer("–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?", reply_markup=back_to_menu_kb())


@sup_admin_router.callback_query(F.data.startswith("unblock_"))
async def unblock_user(call: types.CallbackQuery) -> None:
    data = call.data.split("_")[1]
    await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", reply_markup=back_to_menu_kb())
    await edit_user_id_db(int(data), True)
    await send_message("–í–∞–º –≤—ã–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!", int(data))


@sup_admin_router.callback_query(F.data.startswith("admin-accept"))
async def finish_add_admin_message(call: types.CallbackQuery) -> None:
    data = call.data.split("_")[1]
    await call.message.edit_text(await dev_update_status(int(data), Status.ADMIN.value), reply_markup=back_to_menu_kb())
    await send_message("–í–∞–º –≤—ã–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", int(data), admin_keyboard())


@sup_admin_router.callback_query(F.data.startswith("take-away-admin_"))
async def take_admin(call: types.CallbackQuery) -> None:
    data = call.data.split("_")[1]
    await call.message.edit_text(await dev_update_status(int(data), Status.ACTIVE.value),
                                 reply_markup=back_to_menu_kb())
    await send_message("–£ –≤–∞—Å –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", int(data), None)


@sup_admin_router.message(TakeAwayAdmin.surname)
async def remove_admin(message: types.Message, state: FSMContext) -> None:
    await state.update_data(surname=message.text.title())
    data = await state.get_data()
    await state.set_state(None)
    print(data)
    user = await get_user_for_ta_admin(data["surname"])
    if user:
        account = await get_account(user.id)
        await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É —ç—Ç–æ–≥–æ —á–ª–æ–≤–µ–∫–∞?\n"
                             f"–§–∞–º–∏–ª–∏—è: {user.surname}\n"
                             f"–ò–º—è: {user.name}\n"
                             f"–û—Ç—á–µ—Å—Ç–≤–æ: {user.patronymic}\n",
                             reply_markup=take_away_admin_kb(id_tg=account.id_tg))
    else:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=back_to_menu_kb())


@sup_admin_router.message(Unblock.surname)
async def unblock_user(message: types.Message, state: FSMContext) -> None:
    await state.update_data(surname=message.text.title())
    data = await state.get_data()
    await state.clear()
    user = await get_user_for_undelete(data["surname"])
    if user:
        account = await get_account(user.id)
        await message.answer("–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?\n \n"
                             f"–§–∞–º–∏–ª–∏—è: {user.surname} \n"
                             f"–ò–º—è: {user.name} \n"
                             f"–û—Ç—á–µ—Å—Ç–≤–æ: {user.patronymic}",
                             reply_markup=accept_unblock(id_tg=account.id_tg))

    else:
        await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ {data['surname']} –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=back_to_menu_kb())


@sup_admin_router.message(Delete.surname)
async def confirm_user_by_surname(message: types.Message, state: FSMContext) -> None:
    await state.update_data(surname=message.text)
    data = await state.get_data()
    user = await get_user_for_delete(data["surname"])
    if user:
        account = await get_account(user.id)
        await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞? \n"
                             f"–§–∞–º–∏–ª–∏—è: {user.surname}\n"
                             f"–ò–º—è: {user.name}\n"
                             f"–û—Ç—á–µ—Å—Ç–≤–æ: {user.patronymic}\n",
                             reply_markup=delete_accept(id_user=account.id_tg)
                             )
        await state.clear()
    else:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=back_to_menu_kb())


@sup_admin_router.message(NewAdmin.surname)
async def add_admin_message(message: types.Message, state: FSMContext) -> None:
    await state.update_data(surname=message.text.title())
    data = await state.get_data()
    await state.clear()
    user = await get_user_for_delete(data["surname"])
    if user:
        account = await get_account(user.id)
        if account.status not in [Status.ADMIN.value, Status.SUPER_ADMIN.value, Status.DEVELOPER.value,
                                  Status.DISABLE.value]:
            await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞?\n"
                                 f"–§–∞–º–∏–ª–∏—è: {user.surname}\n"
                                 f"–ò–º—è: {user.name}\n"
                                 f"–û—Ç—á–µ—Å—Ç–≤–æ: {user.patronymic}\n",
                                 reply_markup=accept_admin_kb(id_tg=account.id_tg))
        else:
            await message.answer("–£ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å—Ç–∞—Ç—É—Å —Ä–∞–≤–Ω—ã–π –≤–∞–º –∏–ª–∏ –≤—ã—à–µ, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!",
                                 reply_markup=back_to_menu_kb())
